모티베이션
udemy에서 gui에 관한 수업을 듣고 이것과 관련된 프로젝트를 진행했었는데, 관련하여 조금 더 심화적인 프로젝트를 진행하고 싶었습니다.


데이터 획득 방법
데이터 소스: 사용자 입력
사용자는 애플리케이션의 GUI를 통해 주소, 이메일, 전화번호 등의 정보를 입력합니다.
저장 방식: 로컬 파일 시스템
사용자 입력 데이터는 피클(pickle) 모듈을 사용하여 로컬 파일(address.dat)에 저장됩니다.
데이터 구조: 클래스 객체
Address 클래스의 인스턴스로 데이터가 관리됩니다.

데이터 흐름
사용자가 애플리케이션에 데이터를 입력합니다.
입력된 데이터는 Address 클래스 객체로 생성됩니다.
객체는 피클(pickle) 모듈을 통해 로컬 파일에 저장됩니다.
프로그램 실행 시 저장된 데이터를 로드하여 리스트박스에 표시합니다.

모델
클래스 구조
Address 클래스
속성: name, email, phone
메서드: 생성자(__init__)
AddressBook 클래스
속성: parent, title, name_var, email_var, phone_var, lst_addresses, 등.
메서드: 초기화(__init__), 이벤트 바인딩(bind), 데이터 설정(set_data), 리스트박스 설정(set_listbox), 파일 저장(save_address), 수정(modify_address), 삭제(delete_address), 로드(load_address), 종료(on_exit)

주요 기능
데이터 입력 및 수정
새 주소 추가, 수정, 삭제 기능 제공
데이터 저장 및 로드
피클(pickle) 모듈을 사용하여 데이터를 파일에 저장하고, 프로그램 시작 시 로드

모델 다이어그램
Address 클래스는 주소 정보를 캡슐화합니다.
AddressBook 클래스는 GUI를 통해 사용자와 상호작용하며, Address 객체를 관리합니다.

퍼포먼스 분석
:효율성
데이터의 저장과 로드가 피클(pickle) 모듈을 통해 간단하게 이루어짐
GUI를 통해 사용자가 쉽게 데이터를 관리할 수 있음
:안정성
데이터 저장 파일이 손상되지 않는 한 안정적으로 데이터 관리 가능
간단한 예외 처리로 파일이 없는 경우에도 애플리케이션이 정상 작동
:사용성
직관적인 GUI 제공
리스트박스를 통해 데이터 탐색이 용이함
입력 필드를 통해 간편하게 데이터 수정 및 추가 가능
퍼포먼스 테스트
속도 테스트
주소록 항목 수에 따른 데이터 저장 및 로드 속도 측정
메모리 사용
애플리케이션 실행 시 메모리 사용량 측정

결론
요약
사용자의 주소 데이터를 효율적으로 관리하는 도구입니다.
피클(pickle) 모듈을 통해 데이터 저장 및 로드가 간편하며, 직관적인 GUI를 통해 사용성이 뛰어납니다.

향후 개선점
데이터베이스 사용을 통한 확장성 개선
클라우드 저장소 연동을 통한 데이터 백업 및 복원 기능 추가
보다 정교한 예외 처리 및 사용자 피드백 제공

참고 자료
피클(pickle) 모듈 문서
Tkinter GUI 라이브러리 문서
Python 공식 문서
